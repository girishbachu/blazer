#summary How To Start
#labels Phase-Implementation,Phase-Deploy,Featured

= How To Start =

On Windows, it is possible to launch Burp and Blazer with the following command:

`java -classpath Blazer.jar;burp.jar burp.StartBurp`

On Linux and Mac OS X, use a colon character instead of the semi-colon as the classpath separator:

`java -classpath Blazer.jar;burp.jar burp.StartBurp` 

*Important:* If you are using an old version of Burp, the order of the JARs matter! Burp Free (1.4.01) and old versions of Burp Pro include an outdated version of the Adobe Flex libraries. 

Upon launching Burp, it is possible to verify that Blazer was properly loaded by checking the _"Alerts"_ notification tab. At this point, Blazer can be invoked by using a context menu available from within Burp tools. Please note that the tool detects and verifies the presence of valid Flex’s “RemotingMessage” objects within HTTP requests/responses.


http://i.imgur.com/wmzS4.png

= Usage =

At the top of Blazer’s window, five tabs guide the user throughout the tool configuration:

=== 1. Application Libraries ===

This tab allows to include all application artifacts, including application classes implementing the remote methods as well as application libraries. The current release of Blazer supports JAR files only. From the user’s perspective, these resources are typically available in the application server web-
root, under “/WEB-INF/”.

http://i.imgur.com/lwVzN.png

=== 2. Remote Method Signatures ===

Blazer automatically retrieves public method signatures from the application libraries. This tab allows to select all methods under scrutiny, filtering based on annotation or type.

http://i.imgur.com/Q9Ulx.png

=== 3. General Options and Data Pools ===

Object generation and fuzzing can be precisely customized from the user interface.
From this tab, users can select the number of threads, the total number of permutations for each iteration, common attack payloads and data pools containing “good” data. For further details on how to properly tune Blazer, please refer to the original [http://blazer.googlecode.com/files/BH2012_LucaCarettoni_WP_FINAL.pdf whitepaper] and [http://blazer.googlecode.com/files/BH2012_LucaCarettoni_PRESO_FINAL.pdf presentation].

http://i.imgur.com/s1dqi.png

=== 4. Status ===

This tab allows to control the objects generation or fuzzing progress. It provides an overview of the total number of requests, permutations, overall time, time to finish and speed measured in requests/second. Also, this interface allows to pause, restore and stop current tasks.

http://i.imgur.com/VEfrW.png

=== 5. BeanShell ===

Fuzzing is just the first step. Discovering and exploiting vulnerabilities requires troubleshooting and trial-and-error testing. In several cases, security professionals need an easy way to customize a specific AMF message and send it over the wire multiple times. Blazer embeds a BeanShell console, automatically importing all required application libraries. Advanced users can build custom messages in few instructions by using Blazer internal methods.

http://i.imgur.com/HQdYv.png